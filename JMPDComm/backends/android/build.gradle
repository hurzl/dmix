/*
 * Copyright (C) 2004 Felipe Gustavo de Almeida
 * Copyright (C) 2010-2016 The MPDroid Project
 *
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice,this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'com.android.library'

repositories {
    mavenCentral()
    google()
}

static final def shortHash() {
    "git rev-parse --short HEAD".execute().text.trim()
}

android {
    namespace "com.anpmech.mpd"
    compileSdk 34
    buildToolsVersion '35.0.0'

    defaultConfig {
        minSdk 21
        targetSdkVersion 34
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility "11"
        targetCompatibility "11"
    }

    buildFeatures {
        compose false
        buildConfig true
    }

    sourceSets {
        main {
            java {
                srcDirs '../../src/main/java', 'src/main/java'
            }
            resources {
                srcDirs '../../src/main/resources'
            }
        }

        test {
            java {
                srcDirs '../../src/test/java'
            }

            resources {
                srcDirs '../../src/test/resources'
            }
        }
    }
    lint {
        abortOnError false
    }

    libraryVariants.all { final variant ->

        task("${variant.name}Javadoc", type: Javadoc) {
            title = "$name Android WIP " + shortHash()
            description "Generates Javadoc for $variant.name."
            group "documentation"
            source = variant.javaCompileProvider
            ext.androidJar = "${android.sdkDirectory}" +
                    "/platforms/${android.compileSdkVersion}/android.jar"
            doFirst { classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) }
            gradle.taskGraph.addTaskExecutionListener new BrowseJavadoc(
                    mTask: "${variant.name}Javadoc",
                    mIndexFile: file("${destinationDir}/index.html"))

            options {
                author = true
                header = project.name
                memberLevel = JavadocMemberLevel.PRIVATE
                links("http://docs.oracle.com/javase/8/docs/api/")
                linksOffline("http://developer.android.com/reference",
                        "${android.sdkDirectory}/docs/reference")
                overview("src/main/overview.html")
                showAll()
            }

            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.9.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    // For JUnit 4
    androidTestImplementation 'androidx.test:rules:1.6.1'
//    implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.7.0'
}

class BrowseJavadoc implements TaskExecutionListener {

    String mTask

    File mIndexFile

    @Override
    void beforeExecute(final Task task) {
    }

    @Override
    void afterExecute(final Task task, final TaskState taskState) {
        if (taskState.executed && !taskState.failure && task.name == mTask) {
            println "Javadoc built: " + mIndexFile
            final Class desktop = getClass().classLoader.loadClass("java.awt.Desktop")

            try {
                desktop.newInstance().browse(mIndexFile.toURI())
            } catch (final Exception ignored) {
            }
        }
    }
}
